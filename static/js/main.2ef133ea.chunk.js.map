{"version":3,"sources":["components/Messages/Messages.module.css","components/Qualities/Qualities.module.css","components/Messages/Messages.jsx","components/Qualities/Qualitie.jsx","components/Qualities/Qualities.jsx","components/Greeting/Button.jsx","components/Greeting/Input.jsx","components/Greeting/Counter.jsx","components/Greeting/Names.jsx","components/Greeting/Greeting.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Massage","props","className","s","ramka","src","massage","name","time","sms","Qualitie","q","frame1","frame","Qualities","newQualities","map","index","key","Button","onClick","this","buttonClick","React","Component","Input","classForInput","error","onChange","inputChangeValue","type","placeholder","value","inputValue","Counter","counter","Names","newNames","allNames","nameSpan","length","el","i","Greeting","state","e","currentTarget","setState","alert","newUser","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2ef133ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ramka\":\"Messages_ramka__3KMTu\",\"massage\":\"Messages_massage__6lpYb\",\"name\":\"Messages_name__1CmpK\",\"time\":\"Messages_time__2q_zY\",\"sms\":\"Messages_sms__2DDWD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"Qualities_frame__Xivh2\",\"frame1\":\"Qualities_frame1__g-mLv\"};","import React from 'react';\nimport s from './Messages.module.css'\n\nconst Massage = (props) => {\n    return (\n        <div className={s.ramka}>\n            <img src='https://icatcare.org/app/uploads/2018/07/Thinking-of-getting-a-cat.png'/>\n            <div className={s.massage}>\n                <b className={s.name}>Borodich Olesya</b>\n                <span className={s.time}>22:07</span>\n                <span className={s.sms}>Привет,как дела?</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Massage;\n","import React from 'react';\nimport s from './Qualities.module.css'\n\nconst Qualitie = (props) => {\n    return (\n        <div className={props.q === 'позитивная' ? s.frame1:s.frame}>\n            {props.q}\n        </div>\n    )\n}\n\nexport default Qualitie;\n","import React from 'react';\nimport s from './Qualities.module.css'\nimport Qualitie from \"./Qualitie\";\n\nconst Qualities = (props) => {\n    let qualities = ['позитивная', 'прямолинейная', 'целеустремленная'];\n    const newQualities = qualities.map((q, index)=> <Qualitie  key={index} q={q}/>);\n    return (\n        <div>\n            {newQualities}\n        </div>\n    )\n}\n\nexport default Qualities;\n","import React from 'react';\n\nclass Button extends React.Component {\n    render() {\n        return <div>\n            <button onClick={this.props.buttonClick}>Кнопка </button>\n        </div>\n    }\n}\nexport default Button","import React from 'react';\nimport '../../App.css'\nclass Input extends React.Component {\n\n    // inputChange = (event) => {\n    //     let value = event.currentTarget.value\n    //     this.props.inputChangeValue(value)\n    //         this.setState({\n    //             error:false\n    //         })\n    //     }\n    render() {\n        let classForInput=this.props.error?\"error\":\"\"\n        return <div>\n            <input className={classForInput} onChange={this.props.inputChangeValue} type='text' placeholder='Введи имя' value={this.props.inputValue}/>\n        </div>\n    }\n}\nexport default Input","import React from 'react';\nclass Counter extends React.Component {\n    render() {\n        return (\n            <span>{this.props.counter}</span>\n        )\n    }\n}\nexport default Counter","import React from 'react';\n\nclass Names extends React.Component {\n    render() {\n        let  newNames = this.props.allNames.map((name,index) =>{return {...name, key:index}});\n         let nameSpan =  newNames.length !== 0 && newNames.map((el, i) =>  <span key={i}>{el.name}</span>)\n        return (\n        <div>\n            <span>{nameSpan}</span>\n        </div>\n        )\n    }\n}\nexport default Names","import React from 'react';\nimport Button from \"./Button\";\nimport Input from \"./Input\";\nimport Counter from \"./Counter\";\nimport Names from \"./Names\";\nclass Greeting extends React.Component {\n    state = {\n        inputValue: '',\n        counter: 0,\n        allNames:[],\n        error:false\n    }\n    // inputChange = (event) => {\n    //     let value = event.currentTarget.value\n    //     this.setState({\n    //         inputValue: value,\n    //     })\n    // };\n     inputChangeValue = (e) => {\n        let value=e.currentTarget.value\n         if(value===''){this.setState({\n             error:true\n         })}\n         else{this.setState({\n             error:false\n         })\n         }\n         this.setState({\n             inputValue: value,\n         })\n\n     };\n\n    buttonClick = () => {\n        if(this.state.inputValue===''){this.setState({\n            error:true\n        })}\n        else{this.setState({\n            error:false\n        })\n            alert('Привет,' + this.state.inputValue);\n            let newName = this.state.inputValue;\n            let newUser = {\n                name: newName\n            };\n            this.setState({\n                counter: this.state.counter + 1,\n                inputValue: '',\n                allNames: [...this.state.allNames, newUser]\n\n            })\n        }\n\n\n    }\n    render() {\n        return (\n        <div>\n            <Button buttonClick={this.buttonClick}/>\n            <Input error={this.state.error} inputChangeValue={this.inputChangeValue} inputValue={this.state.inputValue}/>\n            <Counter counter={this.state.counter}/>\n            <Names allNames={this.state.allNames}/>\n        </div>\n        )\n    }\n}\nexport default Greeting","import React from 'react';\nimport Massages from \"./components/Messages/Messages\";\nimport './App.css';\nimport Qualities from \"./components/Qualities/Qualities\";\nimport Greeting from \"./components/Greeting/Greeting\";\n\n\nconst App = (props) => {\n\n    return <div>\n        <Massages/>\n        <Qualities/>\n        <Greeting/>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}